#!/usr/bin/python3

import argparse
import dataclasses
import os
import os.path
import pathlib
import struct
import sys
import fileinput
import functools
import shutil
import asyncio
import serial
import time
from operator import sub

# bottom right corner, 1024x768 resolution is hardcoded on the openQA side, but
# also in the USB HID descriptor below
MOUSE_HIDE_POS = (1023, 767)

class BaseGadget:
    def __init__(self, storage_path=None, cdrom=False):
        self.gadget_configfs_root = pathlib.Path("/sys/kernel/config/usb_gadget/kbd")
        self.udc = os.listdir("/sys/class/udc")[0]
        self.storage_path = storage_path
        self.storage_cdrom = cdrom
        self.enable_usb_gadget = bool(self.storage_path)

    def set_sysfs_attr(self, name, value):
        path = self.gadget_configfs_root / name
        os.makedirs(os.path.dirname(path), exist_ok=True)
        if isinstance(value, str):
            value = value.encode()
        if isinstance(value, int):
            value = str(value).encode()
        with open(path, "wb") as f:
            f.write(value)

    def create_gadget(self):
        self.set_sysfs_attr("bcdUSB", "0x0200")  # USB 2.0
        self.set_sysfs_attr("bDeviceClass", "0x00")  # specified in interface
        self.set_sysfs_attr("bDeviceSubClass", "0x00")  # specified in interface
        self.set_sysfs_attr("bcdDevice", "0x0100")  # v1.0.0
        self.set_sysfs_attr("bDeviceProtocol", "0x00")  # specified in interface
        self.set_sysfs_attr("idVendor", "0x1d6b")  # Linux Foundation
        self.set_sysfs_attr("idProduct", "0x0104")  # Multifunction composite gadget
        self.set_sysfs_attr("strings/0x409/manufacturer", "marmarek")
        self.set_sysfs_attr("strings/0x409/product", "RPi4 USB Gadget")
        self.set_sysfs_attr("strings/0x409/serialnumber", "0123456789abcdef")
        self.set_sysfs_attr("configs/c.1/bmAttributes", "0x80")  # Bus powered
        self.set_sysfs_attr("configs/c.1/MaxPower", "250")
        self.set_sysfs_attr("configs/c.1/strings/0x409/configuration", "c1")
        if self.storage_path:
            self._create_storage_function()

    def _create_storage_function(self):
        for storage, index in zip(self.storage_path, range(2, 5)):
            p = f"functions/mass_storage.usb{index}/lun.0/"
            self.set_sysfs_attr(p + "cdrom", "Y" if self.storage_cdrom else "N")  # is cdrom
            self.set_sysfs_attr(p + "ro", "1")
            self.set_sysfs_attr(p + "file", storage)  # backing file
            self.set_sysfs_attr(p + "removable", "1")
            os.symlink(
                self.gadget_configfs_root / f"functions/mass_storage.usb{index}",
                self.gadget_configfs_root / f"configs/c.1/mass_storage.usb{index}",
            )

    def _get_gadget_dev(self, func):
        with open(self.gadget_configfs_root / (func + "/dev"), "r") as f:
            devnum = f.read()
        return "/dev/" + os.path.basename(
            os.readlink("/sys/dev/char/" + devnum.strip())
        )

    def enable(self):
        if not self.enable_usb_gadget:
            return
        with open(self.gadget_configfs_root / "UDC", "w") as f:
            f.write(self.udc)

    def disable(self):
        if not self.enable_usb_gadget:
            return
        with open(os.path.join(self.gadget_configfs_root, "UDC"), "w") as f:
            f.write("\n")

    def cleanup(self):
        for d in os.listdir(self.gadget_configfs_root / "configs/c.1"):
            if ".usb" in d:
                os.unlink(self.gadget_configfs_root / "configs/c.1" / d)
        for (dirpath, dirs, _files) in os.walk(
            self.gadget_configfs_root, topdown=False
        ):
            for d in dirs:
                if d in ("strings", "os_desc", "configs", "functions", "lun.0"):
                    # Linux doesn't allow to remove this one
                    continue
                os.rmdir(os.path.join(dirpath, d))
        os.rmdir(self.gadget_configfs_root)

    def __enter__(self):
        if os.path.exists(self.gadget_configfs_root):
            # previous instance didn't cleaned up
            self.disable()
            self.cleanup()
        self.create_gadget()
        self.enable()
        return self

    def __exit__(self, exc_type, exc_value, exc_traceback):
        self.disable()
        self.cleanup()


class UsbHidGadget(BaseGadget):
    def __init__(self, storage_path=None, cdrom=False):
        super().__init__(storage_path=storage_path, cdrom=cdrom)
        self.mouse_dev = None
        self.keyboard_dev = None
        self.enable_usb_gadget = True

    def create_gadget(self):
        super().create_gadget()
        self._create_keyboard_function()
        self._create_mouse_function()

    def _create_keyboard_function(self):
        p = "functions/hid.usb0/"
        self.set_sysfs_attr(p + "protocol", "1")  # Keyboard
        self.set_sysfs_attr(p + "subclass", "1")  # boot interface subclass
        self.set_sysfs_attr(p + "report_length", "8")
        # fmt: off
        report_descriptor = [
                0x05, 0x01,     # USAGE_PAGE (Generic Desktop)
                0x09, 0x06,     # USAGE (Keyboard)
                0xa1, 0x01,     # COLLECTION (Application)
                0x05, 0x07,     #   USAGE_PAGE (Keyboard)
                0x19, 0xe0,     #   USAGE_MINIMUM (Keyboard LeftControl)
                0x29, 0xe7,     #   USAGE_MAXIMUM (Keyboard Right GUI)
                0x15, 0x00,     #   LOGICAL_MINIMUM (0)
                0x25, 0x01,     #   LOGICAL_MAXIMUM (1)
                0x75, 0x01,     #   REPORT_SIZE (1)
                0x95, 0x08,     #   REPORT_COUNT (8)
                0x81, 0x02,     #   INPUT (Data,Var,Abs)
                0x95, 0x01,     #   REPORT_COUNT (1)
                0x75, 0x08,     #   REPORT_SIZE (8)
                0x81, 0x03,     #   INPUT (Cnst,Var,Abs)
                0x95, 0x05,     #   REPORT_COUNT (5)
                0x75, 0x01,     #   REPORT_SIZE (1)
                0x05, 0x08,     #   USAGE_PAGE (LEDs)
                0x19, 0x01,     #   USAGE_MINIMUM (Num Lock)
                0x29, 0x05,     #   USAGE_MAXIMUM (Kana)
                0x91, 0x02,     #   OUTPUT (Data,Var,Abs)
                0x95, 0x01,     #   REPORT_COUNT (1)
                0x75, 0x03,     #   REPORT_SIZE (3)
                0x91, 0x03,     #   OUTPUT (Cnst,Var,Abs)
                0x95, 0x06,     #   REPORT_COUNT (6)
                0x75, 0x08,     #   REPORT_SIZE (8)
                0x15, 0x00,     #   LOGICAL_MINIMUM (0)
                0x25, 0x65,     #   LOGICAL_MAXIMUM (101)
                0x05, 0x07,     #   USAGE_PAGE (Keyboard)
                0x19, 0x00,     #   USAGE_MINIMUM (Reserved)
                0x29, 0x65,     #   USAGE_MAXIMUM (Keyboard Application)
                0x81, 0x00,     #   INPUT (Data,Ary,Abs)
                0xc0            # END_COLLECTION
        ]
        # fmt: on
        self.set_sysfs_attr(p + "report_desc", bytes(report_descriptor))
        os.symlink(
            self.gadget_configfs_root / "functions/hid.usb0",
            os.path.join(self.gadget_configfs_root, "configs/c.1/hid.usb0"),
        )

    def _create_mouse_function(self):
        p = "functions/hid.usb1/"
        self.set_sysfs_attr(p + "protocol", "0")  # tablet
        self.set_sysfs_attr(p + "subclass", "0")  # unspecified
        self.set_sysfs_attr(p + "report_length", "6")
        # fmt: off
        # this mouse reports ABSOLUTE position, not relative!
        report_descriptor = [
                0x05, 0x01,        # Usage Page (Generic Desktop Ctrls)
                0x09, 0x02,        # Usage (Mouse)
                0xA1, 0x01,        # Collection (Application)
                0x85, 0x01,        #   Report ID (1)
                0x09, 0x01,        #   Usage (Pointer)
                0xA1, 0x00,        #   Collection (Physical)
                0x05, 0x09,        #     Usage Page (Button)
                0x19, 0x01,        #     Usage Minimum (0x01)
                0x29, 0x03,        #     Usage Maximum (0x03)
                0x15, 0x00,        #     Logical Minimum (0)
                0x25, 0x01,        #     Logical Maximum (1)
                0x95, 0x03,        #     Report Count (3)
                0x75, 0x01,        #     Report Size (1)
                0x81, 0x02,        #     Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position)
                0x95, 0x01,        #     Report Count (1)
                0x75, 0x05,        #     Report Size (5)
                0x81, 0x03,        #     Input (Const,Var,Abs,No Wrap,Linear,Preferred State,No Null Position)
                0x05, 0x01,        #     Usage Page (Generic Desktop Ctrls)
                0x09, 0x30,        #     Usage (X)
                0x09, 0x31,        #     Usage (Y)
                0x16, 0x01, 0x80,        #     Logical Minimum (-32767)
                0x26, 0xFF, 0x7F,        #     Logical Maximum (32767)
                0x75, 0x10,        #     Report Size (16)
                0x95, 0x02,        #     Report Count (2)
                0x81, 0x06,        #     Input (Data,Var,Rel,No Wrap,Linear,Preferred State,No Null Position)
                0xC0,              #   End Collection
                0xC0,              # End Collection
                0x05, 0x0d,        # Usage Page (Digitizer)
                0x09, 0x01,        # Usage (Digitizer)
                0xA1, 0x01,        # Collection (Application)
                0x85, 0x02,        #   Report ID (2)
                0x05, 0x0d,        #   Usage Page (Digitizer)
                0x09, 0x20,        #   Usage (Stylus)
                0xA1, 0x00,        #   Collection (Physical)
                0x09, 0x32,        #     Usage (In Range)
                0x09, 0x42,        #     Usage (Tip Switch)
                0x09, 0x44,        #     Usage (Barrel Switch)
                0x15, 0x00,        #     Logical Minimum (0)
                0x25, 0x01,        #     Logical Maximum (1)
                0x95, 0x03,        #     Report Count (3)
                0x75, 0x01,        #     Report Size (1)
                0x81, 0x02,        #     Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position)
                0x95, 0x05,        #     Report Count (5)
                0x75, 0x01,        #     Report Size (1)
                0x81, 0x03,        #     Input (Const,Var,Abs,No Wrap,Linear,Preferred State,No Null Position)
                0x05, 0x01,        #     Usage Page (Generic Desktop Ctrls)
                0x55, 0x0E,        #     UNIT_EXPONENT (-2)       //10^(-2)
                0x65, 0x13,        #     UNIT (Inches, English Linear)  //But exponent -2, so Physical Maximum is in 10’s of mils.
                0x09, 0x30,        #     Usage (X)
                0x15, 0x00,        #     Logical Minimum (0)
                0x26, 0x00, 0x04,        #     Logical Maximum (1024)
                0x35, 0x00,        #     Physical Minimum (0)
                0x46, 0x00, 0x04,        #     Physical Maximum (1024)
                0x75, 0x10,        #     Report Size (16)
                0x95, 0x01,        #     Report Count (1)
                0x81, 0x02,        #     Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position)
                0x09, 0x31,        #     Usage (Y)
                0x26, 0x00, 0x03,        #     Logical Maximum (768)
                0x46, 0x00, 0x03,        #     Physical Maximum (768)
                0x81, 0x02,        #     Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position)
                0xC0,              #   End Collection
                0xC0,              # End Collection
        ]
        # fmt: on
        self.set_sysfs_attr(p + "report_desc", bytes(report_descriptor))
        os.symlink(
            self.gadget_configfs_root / "functions/hid.usb1",
            self.gadget_configfs_root / "configs/c.1/hid.usb1",
        )

    def enable(self):
        super().enable()
        self.keyboard_dev = open(
            self._get_gadget_dev("functions/hid.usb0"), "wb", buffering=0
        )
        self.mouse_dev = open(
            self._get_gadget_dev("functions/hid.usb1"), "wb", buffering=0
        )

    def disable(self):
        if self.keyboard_dev:
            self.keyboard_dev.close()
            self.keyboard_dev = None
        if self.mouse_dev:
            self.mouse_dev.close()
            self.mouse_dev = None
        super().disable()

    def write_mouse_move_report(self, x, y, wheel=0):
        # 2 - report id - stylus
        # 0x01 - in range, but not touching
        report = struct.pack("<bBhh", 2, 0x01, x, y)
        self.mouse_dev.write(report)

    def write_mouse_btn_report(self, buttons):
        # 1 - report id - buttons
        report = struct.pack("<bBxxxx", 1, buttons)
        self.mouse_dev.write(report)

    def write_keyboard_report(self, modifiers, key):
        mod_mask = 0
        for mod in modifiers:
            mod_mask |= mod
        # TODO: more keys?
        report = struct.pack("BxxBxxxx", mod_mask, key)
        self.keyboard_dev.write(report)
        self.keyboard_dev.write(b"\0" * 8)

    @staticmethod
    def get_keycode(name):
        return keycodes[name].usb


class Ps2HidGadget(BaseGadget):
    def __init__(self, storage_path=None, cdrom=False):
        super().__init__(storage_path=None, cdrom=False)
        self.hid_dev = None
        self.pressed_buttons = 0
        # usually mouse starts at the screen center
        self.last_pos = (1024 // 2, 768 // 2)

    def enable(self):
        super().enable()
        self.hid_dev = serial.Serial("/dev/ttyACM0", 115200, timeout=2.0)

    def disable(self):
        if self.hid_dev:
            self.hid_dev.close()
            self.hid_dev = None
        super().disable()

    @staticmethod
    def _make_crc16(data: bytes) -> int:
        crc = 0xFFFF
        for byte in data:
            crc = crc ^ byte
            for _ in range(8):
                if crc & 0x0001 == 0:
                    crc = crc >> 1
                else:
                    crc = crc >> 1
                    crc = crc ^ 0xA001
        return crc

    def _send_request(self, command: bytes) -> bytes:
        assert len(command) == 5, command
        request = b"\x33" + command
        request += struct.pack(">H", self._make_crc16(request))
        assert len(request) == 8, request
        self.hid_dev.write(request)
        rsp = self.hid_dev.read(8)
        assert rsp[0] == 0x34, f"invalid response header: 0x{rsp[0]:x}"
        assert rsp[1] & 0x80, f"invalid response code: 0x{rsp[1]:x}"

    # Commands (from kvmd/hid/pico/src/ph_proto.h):
    #define PH_PROTO_CMD_PING               ((u8)0x01)
    #define PH_PROTO_CMD_REPEAT             ((u8)0x02)
    #define PH_PROTO_CMD_SET_KBD            ((u8)0x03)
    #define PH_PROTO_CMD_SET_MOUSE          ((u8)0x04)
    #define PH_PROTO_CMD_SET_CONNECTED      ((u8)0x05)
    #define PH_PROTO_CMD_CLEAR_HID          ((u8)0x10)
    #define PH_PROTO_CMD_KBD_KEY            ((u8)0x11)
    #define PH_PROTO_CMD_MOUSE_ABS          ((u8)0x12)
    #define PH_PROTO_CMD_MOUSE_BUTTON       ((u8)0x13)
    #define PH_PROTO_CMD_MOUSE_WHEEL        ((u8)0x14)
    #define PH_PROTO_CMD_MOUSE_REL          ((u8)0x15)

    def write_mouse_move_report(self, x, y, wheel=0):
        if (x, y) == MOUSE_HIDE_POS:
            # re-sync mouse pos by moving way more than necessary
            for _ in range(1024 // 127 + 1):
                self._send_request(struct.pack(">Bbbxx", 0x15, 127, 127))
                self._send_request(struct.pack(">Bbbxx", 0x15, 127, 127))
        else:
            # something about mouse acceleration? the constants here are chosen
            # experimentally, to get pixel-precise result; do not touch unless
            # tested to also produce pixel-precis results
            x += 3
            y += 3
            offset = tuple(map(sub, (x, y), self.last_pos))
            while offset != (0, 0):
                now_move = tuple(map(lambda a: max(min(a, 3), -3), offset))
                self._send_request(struct.pack(">Bbbxx", 0x15, now_move[0], now_move[1]))
                time.sleep(0.01)
                offset = tuple(map(sub, offset, now_move))
        self.last_pos = (x, y)

    def write_mouse_btn_report(self, buttons):
        # 0x13 - button
        # arg buttons: bitmask of pressed:
        #  - 1<<0 - left
        #  - 1<<1 - right
        #  - 1<<2 - middle
        # cmd buttons:
        #  - 1<<0 - middle
        #  - 1<<1 - right
        #  - 1<<2 - left
        # command:
        #  0b11101110
        #    ^^^ - select which button to consider
        #        ^^^ - which are actually pressed
        # second byte is for "extra" buttons (back/forward), ignore them
        buttons = (0
            | (buttons & 0x1) << 2
            | (buttons & 0x2) << 0
            | (buttons & 0x4) >> 2
        )
        select_mask = (self.pressed_buttons | buttons) << 5
        command = struct.pack(">BBBxx", 0x13, select_mask | (buttons << 1), 0)
        self.pressed_buttons = buttons
        self._send_request(command)

    def write_keyboard_report(self, modifiers, key):
        for mod in modifiers:
            self._send_request(struct.pack(">BBBxx", 0x11, mod, 1))
        self._send_request(struct.pack(">BBBxx", 0x11, key, 1))
        self._send_request(struct.pack(">BBBxx", 0x11, key, 0))
        for mod in reversed(modifiers):
            self._send_request(struct.pack(">BBBxx", 0x11, mod, 0))

    @staticmethod
    def get_keycode(name):
        return keycodes[name].mcu


@dataclasses.dataclass(frozen=True)
class McuKey:
    code: int
    mods: tuple[int]


@dataclasses.dataclass(frozen=True)
class UsbKey:
    code: int
    mods: tuple[int]


@dataclasses.dataclass(frozen=True)
class Key:
    mcu: McuKey
    usb: UsbKey


# based on Universal Serial Bus HID Usage Tables
keycodes = {
    # key: (mods, keycode)
    "a": Key(usb=UsbKey(code=0x04, mods=()), mcu=McuKey(code=0x01, mods=())),
    "A": Key(usb=UsbKey(code=0x04, mods=(2,)), mcu=McuKey(code=0x01, mods=(78,))),
    "b": Key(usb=UsbKey(code=0x05, mods=()), mcu=McuKey(code=0x02, mods=())),
    "B": Key(usb=UsbKey(code=0x05, mods=(2,)), mcu=McuKey(code=0x02, mods=(78,))),
    "c": Key(usb=UsbKey(code=0x06, mods=()), mcu=McuKey(code=0x03, mods=())),
    "C": Key(usb=UsbKey(code=0x06, mods=(2,)), mcu=McuKey(code=0x03, mods=(78,))),
    "d": Key(usb=UsbKey(code=0x07, mods=()), mcu=McuKey(code=0x04, mods=())),
    "D": Key(usb=UsbKey(code=0x07, mods=(2,)), mcu=McuKey(code=0x04, mods=(78,))),
    "e": Key(usb=UsbKey(code=0x08, mods=()), mcu=McuKey(code=0x05, mods=())),
    "E": Key(usb=UsbKey(code=0x08, mods=(2,)), mcu=McuKey(code=0x05, mods=(78,))),
    "f": Key(usb=UsbKey(code=0x09, mods=()), mcu=McuKey(code=0x06, mods=())),
    "F": Key(usb=UsbKey(code=0x09, mods=(2,)), mcu=McuKey(code=0x06, mods=(78,))),
    "g": Key(usb=UsbKey(code=0x0A, mods=()), mcu=McuKey(code=0x07, mods=())),
    "G": Key(usb=UsbKey(code=0x0A, mods=(2,)), mcu=McuKey(code=0x07, mods=(78,))),
    "h": Key(usb=UsbKey(code=0x0B, mods=()), mcu=McuKey(code=0x08, mods=())),
    "H": Key(usb=UsbKey(code=0x0B, mods=(2,)), mcu=McuKey(code=0x08, mods=(78,))),
    "i": Key(usb=UsbKey(code=0x0C, mods=()), mcu=McuKey(code=0x09, mods=())),
    "I": Key(usb=UsbKey(code=0x0C, mods=(2,)), mcu=McuKey(code=0x09, mods=(78,))),
    "j": Key(usb=UsbKey(code=0x0D, mods=()), mcu=McuKey(code=0x0A, mods=())),
    "J": Key(usb=UsbKey(code=0x0D, mods=(2,)), mcu=McuKey(code=0x0A, mods=(78,))),
    "k": Key(usb=UsbKey(code=0x0E, mods=()), mcu=McuKey(code=0x0B, mods=())),
    "K": Key(usb=UsbKey(code=0x0E, mods=(2,)), mcu=McuKey(code=0x0B, mods=(78,))),
    "l": Key(usb=UsbKey(code=0x0F, mods=()), mcu=McuKey(code=0x0C, mods=())),
    "L": Key(usb=UsbKey(code=0x0F, mods=(2,)), mcu=McuKey(code=0x0C, mods=(78,))),
    "m": Key(usb=UsbKey(code=0x10, mods=()), mcu=McuKey(code=0x0d, mods=())),
    "M": Key(usb=UsbKey(code=0x10, mods=(2,)), mcu=McuKey(code=0x0d, mods=(78,))),
    "n": Key(usb=UsbKey(code=0x11, mods=()), mcu=McuKey(code=0x0e, mods=())),
    "N": Key(usb=UsbKey(code=0x11, mods=(2,)), mcu=McuKey(code=0x0e, mods=(78,))),
    "o": Key(usb=UsbKey(code=0x12, mods=()), mcu=McuKey(code=0x0f, mods=())),
    "O": Key(usb=UsbKey(code=0x12, mods=(2,)), mcu=McuKey(code=0x0f, mods=(78,))),
    "p": Key(usb=UsbKey(code=0x13, mods=()), mcu=McuKey(code=0x10, mods=())),
    "P": Key(usb=UsbKey(code=0x13, mods=(2,)), mcu=McuKey(code=0x10, mods=(78,))),
    "q": Key(usb=UsbKey(code=0x14, mods=()), mcu=McuKey(code=0x11, mods=())),
    "Q": Key(usb=UsbKey(code=0x14, mods=(2,)), mcu=McuKey(code=0x11, mods=(78,))),
    "r": Key(usb=UsbKey(code=0x15, mods=()), mcu=McuKey(code=0x12, mods=())),
    "R": Key(usb=UsbKey(code=0x15, mods=(2,)), mcu=McuKey(code=0x12, mods=(78,))),
    "s": Key(usb=UsbKey(code=0x16, mods=()), mcu=McuKey(code=0x13, mods=())),
    "S": Key(usb=UsbKey(code=0x16, mods=(2,)), mcu=McuKey(code=0x13, mods=(78,))),
    "t": Key(usb=UsbKey(code=0x17, mods=()), mcu=McuKey(code=0x14, mods=())),
    "T": Key(usb=UsbKey(code=0x17, mods=(2,)), mcu=McuKey(code=0x14, mods=(78,))),
    "u": Key(usb=UsbKey(code=0x18, mods=()), mcu=McuKey(code=0x15, mods=())),
    "U": Key(usb=UsbKey(code=0x18, mods=(2,)), mcu=McuKey(code=0x15, mods=(78,))),
    "v": Key(usb=UsbKey(code=0x19, mods=()), mcu=McuKey(code=0x16, mods=())),
    "V": Key(usb=UsbKey(code=0x19, mods=(2,)), mcu=McuKey(code=0x16, mods=(78,))),
    "w": Key(usb=UsbKey(code=0x1A, mods=()), mcu=McuKey(code=0x17, mods=())),
    "W": Key(usb=UsbKey(code=0x1A, mods=(2,)), mcu=McuKey(code=0x17, mods=(78,))),
    "x": Key(usb=UsbKey(code=0x1B, mods=()), mcu=McuKey(code=0x18, mods=())),
    "X": Key(usb=UsbKey(code=0x1B, mods=(2,)), mcu=McuKey(code=0x18, mods=(78,))),
    "y": Key(usb=UsbKey(code=0x1C, mods=()), mcu=McuKey(code=0x19, mods=())),
    "Y": Key(usb=UsbKey(code=0x1C, mods=(2,)), mcu=McuKey(code=0x19, mods=(78,))),
    "z": Key(usb=UsbKey(code=0x1D, mods=()), mcu=McuKey(code=0x1A, mods=())),
    "Z": Key(usb=UsbKey(code=0x1D, mods=(2,)), mcu=McuKey(code=0x1A, mods=(78,))),
    "1": Key(usb=UsbKey(code=0x1E, mods=()), mcu=McuKey(code=0x1B, mods=())),
    "!": Key(usb=UsbKey(code=0x1E, mods=(2,)), mcu=McuKey(code=0x1B, mods=(78,))),
    "2": Key(usb=UsbKey(code=0x1F, mods=()), mcu=McuKey(code=0x1C, mods=())),
    "@": Key(usb=UsbKey(code=0x1F, mods=(2,)), mcu=McuKey(code=0x1C, mods=(78,))),
    "3": Key(usb=UsbKey(code=0x20, mods=()), mcu=McuKey(code=0x1d, mods=())),
    "#": Key(usb=UsbKey(code=0x20, mods=(2,)), mcu=McuKey(code=0x1d, mods=(78,))),
    "4": Key(usb=UsbKey(code=0x21, mods=()), mcu=McuKey(code=0x1e, mods=())),
    "$": Key(usb=UsbKey(code=0x21, mods=(2,)), mcu=McuKey(code=0x1e, mods=(78,))),
    "5": Key(usb=UsbKey(code=0x22, mods=()), mcu=McuKey(code=0x1f, mods=())),
    "%": Key(usb=UsbKey(code=0x22, mods=(2,)), mcu=McuKey(code=0x1f, mods=(78,))),
    "6": Key(usb=UsbKey(code=0x23, mods=()), mcu=McuKey(code=0x20, mods=())),
    "^": Key(usb=UsbKey(code=0x23, mods=(2,)), mcu=McuKey(code=0x20, mods=(78,))),
    "7": Key(usb=UsbKey(code=0x24, mods=()), mcu=McuKey(code=0x21, mods=())),
    "&": Key(usb=UsbKey(code=0x24, mods=(2,)), mcu=McuKey(code=0x21, mods=(78,))),
    "8": Key(usb=UsbKey(code=0x25, mods=()), mcu=McuKey(code=0x22, mods=())),
    "*": Key(usb=UsbKey(code=0x25, mods=(2,)), mcu=McuKey(code=0x22, mods=(78,))),
    "9": Key(usb=UsbKey(code=0x26, mods=()), mcu=McuKey(code=0x23, mods=())),
    "(": Key(usb=UsbKey(code=0x26, mods=(2,)), mcu=McuKey(code=0x23, mods=(78,))),
    "0": Key(usb=UsbKey(code=0x27, mods=()), mcu=McuKey(code=0x24, mods=())),
    ")": Key(usb=UsbKey(code=0x27, mods=(2,)), mcu=McuKey(code=0x24, mods=(78,))),
    "ret": Key(usb=UsbKey(code=0x28, mods=()), mcu=McuKey(code=0x25, mods=())),
    "esc": Key(usb=UsbKey(code=0x29, mods=()), mcu=McuKey(code=0x26, mods=())),
    "backspace": Key(usb=UsbKey(code=0x2A, mods=()), mcu=McuKey(code=0x27, mods=())),
    "tab": Key(usb=UsbKey(code=0x2B, mods=()), mcu=McuKey(code=0x28, mods=())),
    "space": Key(usb=UsbKey(code=0x2C, mods=()), mcu=McuKey(code=0x29, mods=())),
    "spc": Key(usb=UsbKey(code=0x2C, mods=()), mcu=McuKey(code=0x29, mods=())),
    "minus": Key(usb=UsbKey(code=0x2D, mods=()), mcu=McuKey(code=0x2A, mods=())),
    "-": Key(usb=UsbKey(code=0x2D, mods=()), mcu=McuKey(code=0x2A, mods=())),
    "_": Key(usb=UsbKey(code=0x2D, mods=(2,)), mcu=McuKey(code=0x2A, mods=(78,))),
    "=": Key(usb=UsbKey(code=0x2E, mods=()), mcu=McuKey(code=0x2B, mods=())),
    "+": Key(usb=UsbKey(code=0x2E, mods=(2,)), mcu=McuKey(code=0x2B, mods=(78,))),
    "[": Key(usb=UsbKey(code=0x2F, mods=()), mcu=McuKey(code=0x2C, mods=())),
    "{": Key(usb=UsbKey(code=0x2F, mods=(2,)), mcu=McuKey(code=0x2C, mods=(78,))),
    "]": Key(usb=UsbKey(code=0x30, mods=()), mcu=McuKey(code=0x2d, mods=())),
    "}": Key(usb=UsbKey(code=0x30, mods=(2,)), mcu=McuKey(code=0x2d, mods=(78,))),
    "\\": Key(usb=UsbKey(code=0x31, mods=()), mcu=McuKey(code=0x2e, mods=())),
    "|": Key(usb=UsbKey(code=0x31, mods=(2,)), mcu=McuKey(code=0x2e, mods=(78,))),
    #'#': Key(usb=UsbKey(code=0x32, mods=()), mcu=McuKey(code=0x2f, mods=())),
    #'~': Key(usb=UsbKey(code=0x32, mods=(2,)), mcu=McuKey(code=0x2f, mods=(78,))),
    ";": Key(usb=UsbKey(code=0x33, mods=()), mcu=McuKey(code=0x2f, mods=())),
    ":": Key(usb=UsbKey(code=0x33, mods=(2,)), mcu=McuKey(code=0x2f, mods=(78,))),
    "'": Key(usb=UsbKey(code=0x34, mods=()), mcu=McuKey(code=0x30, mods=())),
    '"': Key(usb=UsbKey(code=0x34, mods=(2,)), mcu=McuKey(code=0x30, mods=(78,))),
    "`": Key(usb=UsbKey(code=0x35, mods=()), mcu=McuKey(code=0x31, mods=())),
    "~": Key(usb=UsbKey(code=0x35, mods=(2,)), mcu=McuKey(code=0x31, mods=(78,))),
    ",": Key(usb=UsbKey(code=0x36, mods=()), mcu=McuKey(code=0x32, mods=())),
    "<": Key(usb=UsbKey(code=0x36, mods=(2,)), mcu=McuKey(code=0x32, mods=(78,))),
    ".": Key(usb=UsbKey(code=0x37, mods=()), mcu=McuKey(code=0x33, mods=())),
    ">": Key(usb=UsbKey(code=0x37, mods=(2,)), mcu=McuKey(code=0x33, mods=(78,))),
    "/": Key(usb=UsbKey(code=0x38, mods=()), mcu=McuKey(code=0x34, mods=())),
    "?": Key(usb=UsbKey(code=0x38, mods=(2,)), mcu=McuKey(code=0x34, mods=(78,))),
    #'caps lock': Key(usb=UsbKey(code=0x39, mods=()), mcu=McuKey(code=0x35, mods=())),
    "f1": Key(usb=UsbKey(code=0x3A, mods=()), mcu=McuKey(code=0x36, mods=())),
    "f2": Key(usb=UsbKey(code=0x3B, mods=()), mcu=McuKey(code=0x37, mods=())),
    "f3": Key(usb=UsbKey(code=0x3C, mods=()), mcu=McuKey(code=0x38, mods=())),
    "f4": Key(usb=UsbKey(code=0x3D, mods=()), mcu=McuKey(code=0x39, mods=())),
    "f5": Key(usb=UsbKey(code=0x3E, mods=()), mcu=McuKey(code=0x3A, mods=())),
    "f6": Key(usb=UsbKey(code=0x3F, mods=()), mcu=McuKey(code=0x3B, mods=())),
    "f7": Key(usb=UsbKey(code=0x40, mods=()), mcu=McuKey(code=0x3c, mods=())),
    "f8": Key(usb=UsbKey(code=0x41, mods=()), mcu=McuKey(code=0x3d, mods=())),
    "f9": Key(usb=UsbKey(code=0x42, mods=()), mcu=McuKey(code=0x3e, mods=())),
    "f10": Key(usb=UsbKey(code=0x43, mods=()), mcu=McuKey(code=0x3f, mods=())),
    "f11": Key(usb=UsbKey(code=0x44, mods=()), mcu=McuKey(code=0x40, mods=())),
    "f12": Key(usb=UsbKey(code=0x45, mods=()), mcu=McuKey(code=0x41, mods=())),
    "printscreen": Key(usb=UsbKey(code=0x46, mods=()), mcu=McuKey(code=0x42, mods=())),
    "scroll": Key(usb=UsbKey(code=0x47, mods=()), mcu=McuKey(code=0x44, mods=())),
    "pause": Key(usb=UsbKey(code=0x48, mods=()), mcu=McuKey(code=0x45, mods=())),
    "insert": Key(usb=UsbKey(code=0x49, mods=()), mcu=McuKey(code=0x43, mods=())),
    "home": Key(usb=UsbKey(code=0x4A, mods=()), mcu=McuKey(code=0x44, mods=())),
    "pageup": Key(usb=UsbKey(code=0x4B, mods=()), mcu=McuKey(code=0x45, mods=())),
    "delete": Key(usb=UsbKey(code=0x4C, mods=()), mcu=McuKey(code=0x46, mods=())),
    "end": Key(usb=UsbKey(code=0x4D, mods=()), mcu=McuKey(code=0x47, mods=())),
    "pagedown": Key(usb=UsbKey(code=0x4E, mods=()), mcu=McuKey(code=0x48, mods=())),
    "right": Key(usb=UsbKey(code=0x4F, mods=()), mcu=McuKey(code=0x49, mods=())),
    "left": Key(usb=UsbKey(code=0x50, mods=()), mcu=McuKey(code=0x4a, mods=())),
    "down": Key(usb=UsbKey(code=0x51, mods=()), mcu=McuKey(code=0x4b, mods=())),
    "up": Key(usb=UsbKey(code=0x52, mods=()), mcu=McuKey(code=0x4c, mods=())),
    "ctrl": Key(usb=UsbKey(code=0x0, mods=(1,)), mcu=McuKey(code=0x0, mods=(77,))),
    "shift": Key(usb=UsbKey(code=0x0, mods=(2,)), mcu=McuKey(code=0x0, mods=(78,))),
    "alt": Key(usb=UsbKey(code=0x0, mods=(4,)), mcu=McuKey(code=0x0, mods=(79,))),
    "meta": Key(usb=UsbKey(code=0x0, mods=(8,)), mcu=McuKey(code=0x0, mods=(80,))),
    "rctrl": Key(usb=UsbKey(code=0x0, mods=(16,)), mcu=McuKey(code=0x0, mods=(81,))),
    "rshift": Key(usb=UsbKey(code=0x0, mods=(32,)), mcu=McuKey(code=0x0, mods=(82,))),
    "ralt": Key(usb=UsbKey(code=0x0, mods=(64,)), mcu=McuKey(code=0x0, mods=(83,))),
    "rmeta": Key(usb=UsbKey(code=0x0, mods=(128,)), mcu=McuKey(code=0x0, mods=(84,))),
}


def parse_and_send_cmd(gadget, line):
    if line == "reconnect":
        gadget.disable()
        gadget.enable()
        return

    if line.startswith("mouse_"):
        cmd, param = line.split(" ", 1)
        if cmd == "mouse_move":
            x, y = [int(p) for p in param.split(" ")]
            # x, y = (32767/1024*x), (32767/768*y)
            gadget.write_mouse_move_report(int(x), int(y))
        elif cmd == "mouse_button":
            param = int(param)
            gadget.write_mouse_btn_report(param)
        else:
            print("Unknown command: {}".format(cmd), file=sys.stderr)
        return

    if line.startswith("type "):
        string = line[len("type ") :]
        for k in string:
            if k == " ":
                k = "space"
            parse_and_send_cmd(gadget, k)
        return

    if line.startswith("cmd "):
        string = line[len("cmd ") :]
        for k in string:
            if k == " ":
                k = "space"
            parse_and_send_cmd(gadget, k)
        parse_and_send_cmd(gadget, "ret")
        return

    key = line
    mods = []
    while True:
        if key.startswith("ctrl-"):
            mods += gadget.get_keycode("ctrl").mods
            key = key[len("ctrl-") :]
        elif key.startswith("shift-"):
            mods += gadget.get_keycode("shift").mods
            key = key[len("shift-") :]
        elif key.startswith("alt-"):
            mods += gadget.get_keycode("alt").mods
            key = key[len("alt-") :]
        else:
            break

    if key not in keycodes:
        print("Unknown key: {}".format(key))
        return

    key = gadget.get_keycode(key)
    mods += key.mods
    gadget.write_keyboard_report(mods, key.code)


async def handle_client(gadget, reader, writer):
    while True:
        line = (await reader.readline()).decode("utf8")
        if not line:
            break
        try:
            parse_and_send_cmd(gadget, line.strip())
            writer.write(b"ok\n")
            await writer.drain()
        except BrokenPipeError:
            writer.write("error: failed to send '{}' - USB disconnected".format(line.strip()).encode())
            await writer.drain()
    writer.close()


async def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--storage", default=[], action="append")
    parser.add_argument("--is-cdrom", default=False, action="store_true")
    parser.add_argument("--storage-only", default=False, action="store_true")
    parser.add_argument("--ps2", default=False, action="store_true",
                        help="Control via PS/2 kbd/mouse instead of USB, requires PiKVM PS2 bridge at /dev/ttyACM0")
    parser.add_argument(
        "--socket",
        default=None,
        action="store",
        help="Listen on this UNIX socket, instead of stdin",
    )
    parser.add_argument(
        "--socket-group",
        default=None,
        action="store",
        help="Set group owner of the socket",
    )
    args = parser.parse_args()

    storage = []
    if args.storage:
        for path in args.storage:
            if os.path.exists(path):
                storage.append(path)
        if not storage:
            print("None of {} exist, skipping storage emulation".format(args.storage))

    gadget_class = UsbHidGadget
    if args.storage_only:
        gadget_class = BaseGadget
    elif args.ps2:
        gadget_class = Ps2HidGadget

    with gadget_class(storage_path=storage, cdrom=args.is_cdrom) as gadget:
        if args.socket:
            server = await asyncio.start_unix_server(
                functools.partial(handle_client, gadget), args.socket
            )
            if args.socket_group:
                shutil.chown(args.socket, group=args.socket_group)
                os.chmod(args.socket, 0o660)
            async with server:
                await server.serve_forever()
        else:
            for line in fileinput.input(files=[]):
                try:
                    parse_and_send_cmd(gadget, line.strip())
                    print("ok")
                except BrokenPipeError:
                    print("error: failed to send '{}' - USB disconnected".format(line.strip()))


if __name__ == "__main__":
    asyncio.run(main())
