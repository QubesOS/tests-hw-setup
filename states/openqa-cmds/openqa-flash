#!/bin/sh

. "$(dirname "$0")/functions"

hostid=1
case "$1" in
    --hostid=*) hostid="${1#--hostid=}"; shift ;;
esac

target_settings "$hostid"

set -e

restore_snapshot() {
    snapid="$1"

    ssh_target sh -c 'cat > /tmp/snapshot.sh && bash /tmp/snapshot.sh' <<EOF
set -euo pipefail

if [ "\$(blkid -p "$lvmpart" -o value -s TYPE)" = "crypto_LUKS" ]; then
    cryptsetup open "$lvmpart" luks <<<"lukspass"
fi

if ! [ "\$(lvs -o vg_name,name --noheadings --select 'lv_name = "snap-$snapid-root"')" ]; then
    echo "Snapshot $snapid not found"
    exit 1
fi

declare -A keep_volumes
rootvol=
for volume in \$(lvs -o vg_name,name --noheadings --separator '/' --select 'lv_role=public && lv_name =~ "^snap-$snapid-"'); do
    origname="\${volume##*/snap-$snapid-}"
    keep_volumes["\$origname"]=1
    vg="\${volume%/*}"
    lvremove -f "\$vg/\$origname" || :
    lvcreate --ignoremonitoring -kn -n "\$origname" -s "\$volume"
    if [ "\$origname" = "root" ]; then
        rootvol="\$vg/\$origname"
    fi
done
# remove volumes that weren't there before
for volume in \$(lvs -o vg_name,name --noheadings --separator '/' --select 'lv_role=public && lv_name !~ "^snap-" && pool_lv =~ "..."'); do
    if ! [[ \${keep_volumes["\${volume##*/}"]+set} ]]; then
        echo Removing \$volume
        lvremove -f "\$volume"
    fi
done

if [ -z "\$rootvol" ]; then
    echo "Root volume not found, aborting"
    exit 1
fi

mkdir -p /mnt/sysroot /mnt/part
lvchange --ignoremonitoring -ay /dev/\$rootvol
mount /dev/\$rootvol /mnt/sysroot -o ro

if [ -e /mnt/sysroot/snap-efi ] && [ -e "$efipart" ] && [ "\$(blkid "$efipart" -o value -s TYPE)" = "vfat" ]; then
    mount "$efipart" /mnt/part
    rm -rf /mnt/part/*
    cp -r /mnt/sysroot/snap-efi/* /mnt/part/
    umount /mnt/part
fi

if [ -e /mnt/sysroot/snap-boot ] && [ -e "$bootpart" ] && [ "\$(blkid "$bootpart" -o value -s TYPE)" = "ext4" ]; then
    mount "$bootpart" /mnt/part
    cp /mnt/part/kexec_rollback.txt /tmp/ || :
    cp /mnt/part/kexec_hotp_counter /tmp/ || :
    rm -rf /mnt/part/*
    cp -a /mnt/sysroot/snap-boot/* /mnt/part/
    cp /tmp/kexec_rollback.txt /mnt/part/ || :
    cp /tmp/kexec_hotp_counter /mnt/part/ || :
    umount /mnt/part
fi

umount /mnt/sysroot
vgchange --ignoremonitoring -an
if [ -e /dev/mapper/luks ]; then
    sleep 1
    cryptsetup close luks
fi
sync
EOF
}

#### MAIN START ####

heads="$(jq -r .HEADS < vars.json)"
usbboot="$(jq -r .USBBOOT < vars.json)"
# convert "null" or "0" to empty
[ "$heads" != "1" ] && heads=
[ "$usbboot" != "1" ] && usbboot=

asset_path="$1"

if [ -n "$heads" ] || [ -n "$usbboot" ]; then
    rm -f input-pipe
    mkfifo input-pipe
    trap 'rm -f input-pipe' EXIT
    sudo /usr/local/bin/gadget-control --storage="/root/boot-disk-rescue2.img" < input-pipe &
    exec 9>input-pipe
fi

thor rescue poweron

if [ -n "$heads" ]; then
    sleep 15
    heads_boot_usb
elif [ -n "$usbboot" -a -x /usr/local/bin/boot-menu-interact ]; then
    /usr/local/bin/boot-menu-interact -n 9 "USB"
fi

# give it some time to boot
sleep 90
if ! wait_boot; then
    if [ -n "$heads" ] && [ -z "$asset_path" ]; then
        # The most likely case is Heads waits on a "/dev/sda1 missing" prompt,
        # which means the disk is already wiped. Optimistically assume it is
        # the case. If not, the test will fail later anyway, but with a screen
        # output captured this time, so diagnosis will be easier.
        echo "Assuming the disk is wiped already" >&2
        exit 0
    fi
    exit 1
fi

retries=30
while ! ssh_target test -b "$disk"; do
    retries=$((retries - 1))
    if [ $retries -le 0 ]; then
	ssh_target dmesg
	ssh_target xl dmesg
        echo "Timeout waiting for $disk" >&2
        exit 1
    fi
    sleep 1
done

if [ -n "$asset_path" ]; then
    # make sure it is really just snapshot id, not a full disk image
    if [ "$(stat -L -c %s "$asset_path")" -gt 16 ]; then
        echo "\"disk\" file $asset_path too big, it should contain just snapshot id" >&2
        exit 1
    fi
    snapid=$(cat "$asset_path")
    echo "Restoring snapshot $snapid"
    restore_snapshot "$snapid"
else
    echo "No disk (snapshot) to restore specified, wiping the whole disk clean"
    # wait for anaconda rescue to stop touching the disk
    sleep 30

    if [ -n "$heads" ]; then
        # save kexec_rollback.txt, to avoid excessive writes to TPM
        ssh_target sh -c 'cat >/tmp/save-tpm.sh && bash /tmp/save-tpm.sh' <<EOF |
mkdir -p /mnt/boot
mount "$bootpart" /mnt/boot
tar c -C /mnt/boot kexec_rollback.txt kexec_hotp_counter
umount /mnt/boot
EOF
        tar x kexec_rollback.txt kexec_hotp_counter || :
    fi


    retries=3
    while ! ssh_target wipefs -a "$disk" 2>&1 && [ $retries -gt 0 ]; do
        sleep 1;
        retries=$((retries - 1))
    done
fi

thor poweroff openqa

