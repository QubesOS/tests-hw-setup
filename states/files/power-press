#!/usr/bin/python3

# Drive servo motor connected or a switch via GPIO to press a power button on
# another computer.
# The first argument is button name, the second is press type (short/long).

try:
    import RPi.GPIO as GPIO
    has_rpi = True
except ImportError:
    has_rpi = False
import time
import sys
import os
import configparser

import gpiod


def load_config():
    config = configparser.ConfigParser()
    config.read('/etc/openqa/hw-control.conf')
    return config

def servo_rpi(pin, idle_pos, press_pos, press_time):
    pin = int(pin)
    idle_pos, press_pos = float(idle_pos), float(press_pos)
    GPIO.setmode(GPIO.BCM)
    GPIO.setup(pin, GPIO.OUT)
    p = GPIO.PWM(pin, 50) # GPIO x for PWM with 50Hz

    p.start(press_pos) # Initialization
    time.sleep(press_time)
    p.ChangeDutyCycle(idle_pos)
    time.sleep(0.2)
    p.stop()
    GPIO.cleanup()

def servo_gpiod(pin, idle_pos, press_pos, press_time):
    pin = int(pin)
    def pwm(line, pos, pulse_time):
        pos = float(pos)
        time_start = time.time()
        while (time_now := time.time()) < time_start+press_time:
            line.set_value(1)
            time.sleep(pos/100/50)
            line.set_value(0)
            time.sleep(time_now+1/50-time.time())

    with gpiod.Chip(str(pin // 32)) as chip:
        line = chip.get_line(pin % 32)
        line.request('power-press')
        line.set_direction_output()
        pwm(line, press_pos, press_time)
        pwm(line, idle_pos, 0.2)
        line.set_direction_input()
        line.release()

if has_rpi:
    servo = servo_rpi
else:
    servo = servo_gpiod

def switch(pin, idle_state, press_state, press_time):
    pin = int(pin)
    idle_state, press_state = int(idle_state), int(press_state)
    GPIO.setmode(GPIO.BCM)
    GPIO.setup(pin, GPIO.OUT)
    GPIO.output(pin, press_state)
    time.sleep(press_time)
    GPIO.output(pin, idle_state)
    GPIO.cleanup()

def press(config_line, press_time):
    button_type, gpio_pin, idle_state, press_state = config_line.split(' ')
    if button_type == 'servo':
        servo(gpio_pin, idle_state, press_state, press_time)
    elif button_type == 'switch':
        switch(gpio_pin, idle_state, press_state, press_time)

def system_state(config_line):
    state_type, gpio_pin, expected_state = config_line.split(' ')
    gpio_pin = int(gpio_pin)
    assert state_type == 'led'
    GPIO.setmode(GPIO.BCM)
    GPIO.setup(gpio_pin, GPIO.IN)
    state = GPIO.input(gpio_pin)
    GPIO.cleanup()
    return state

def main():
    button = sys.argv[1]

    if button == 'ssh':
        button = os.environ['SSH_ORIGINAL_COMMAND'] or 'power'

    press_time = 1
    try:
        if sys.argv[2] == 'long':
            press_time = 5
    except IndexError:
        pass

    config = load_config()
    try:
        config_line = config['buttons'][button]
    except KeyError:
        print('Unsupported dvice/button')
        sys.exit(1)

    press(config_line, press_time)

    try:
        state_config_line = config['system_state'][button]
    except KeyError:
        state_config_line = None
        pass

    if state_config_line and press_time < 5:
        time.sleep(1)
        # if there is a matching LED (or such), check its state and possibly
        # retry pressing the button
        if not system_state(state_config_line):
            press(config_line, press_time)


if __name__ == '__main__':
    main()
