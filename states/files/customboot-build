#!/bin/sh

[ "${FLOCKER}" != "$0" ] && exec env FLOCKER="$0" flock -en "$0" "$0" "$@" || :

set -e
set -x

builddir=$(mktemp -d)
trap "rm -rf $builddir" EXIT

sudo systemctl stop gadget-control-custom.service

# extract from stdin
mkdir -p "$builddir/EFI/BOOT"
tar xv -C "$builddir/EFI/BOOT"
exec </dev/null

# wrap grub.cfg in a menu entry
if [ -e "$builddir/EFI/BOOT/grub.cfg" ]; then
    cat > "$builddir/grub.cfg" <<EOF
set timeout=0
set default=0
menuentry Custom boot {
$(cat "$builddir/EFI/BOOT/grub.cfg")
}
EOF
    mv -f "$builddir/grub.cfg" "$builddir/EFI/BOOT/grub.cfg"
fi

# add bootloader itself (grub)
cp $HOME/grubx64.efi "$builddir/EFI/BOOT/BOOTX64.EFI"

truncate -s 500M "$builddir/bootpart.img"
/usr/sbin/mkfs.vfat "$builddir/bootpart.img"
mcopy -i "$builddir/bootpart.img" -s "$builddir/EFI" ::

truncate -s 512M "$builddir/bootdisk.img"
efi_system="C12A7328-F81F-11D2-BA4B-00A0C93EC93B"
echo ",,$efi_system" | /sbin/sfdisk --label gpt "$builddir/bootdisk.img"
sector=512
start=$(/sbin/sfdisk --json "$builddir/bootdisk.img" | jq '.partitiontable.partitions[0].start')
dd if="$builddir/bootpart.img" of="$builddir/bootdisk.img" bs=$sector seek=$start conv=sparse

mv "$builddir/bootdisk.img" /home/customboot/bootdisk.img
sudo systemctl restart gadget-control-custom.service
